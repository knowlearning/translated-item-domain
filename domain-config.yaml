authorize:
  sameDomain:
    postgres: same_domain_authorization
  crossDomain:
    postgres: cross_domain_authorization
postgres:
  tables: {}
  functions:
    same_domain_authorization:
      returns: BOOLEAN
      language: PLpgSQL
      body: |
        BEGIN
          RETURN TRUE;
        END;
      arguments:
      - name: requestingUser
        type: TEXT
      - name: requestedScope
        type: TEXT
    cross_domain_authorization:
      returns: BOOLEAN
      language: PLpgSQL
      body: |
        BEGIN
          RETURN TRUE;
        END;
      arguments:
      - name: requestingDomain
        type: TEXT
      - name: requestingUser
        type: TEXT
      - name: requestedScope
        type: TEXT
  queries:
    metadata: SELECT * FROM metadata LIMIT 20
agent: |
  import Agent, { getAgent } from 'npm:@knowlearning/agents/deno.js'

  const TranslationAgent = getAgent('f74e9cb3-2b53-4c85-9b0c-f1d61b032b3f.localhost:5889')

  const TRANSLATABLE_TARGET_TYPE = 'application/json;type=translatable_target'

  Agent.on('child', child => {
    const { environment: { user } } = child
    Agent.log(`GOT CHILD CONNECTION!!!!!!!! ${user}`)
    child.on('mutate', async ({ scope, patch, id }) => {
      if (patch.find(({ path }) => path[0] === 'translations')) {
        const itemState = await Agent.state(id)
        itemState.translations.paths.forEach(async path => {
          const translatableTargetMetadata = await TranslationAgent.metadata(JSON.stringify(path))
          if (translatableTargetMetadata.active_type !== TRANSLATABLE_TARGET_TYPE) {
            translatableTargetMetadata.active_type = TRANSLATABLE_TARGET_TYPE
          }
          const translatableTarget = await TranslationAgent.state(JSON.stringify(path))

          translatableTarget.source_language = itemState.translations.source_language
          translatableTarget.path = [...path] // need to unwrap since path is mutable
          translatableTarget.source_string = resolvePath(path, itemState)
        })
        Agent.log('TRANSLATIONS PATCH!!!!!!', scope, patch, id)
        const translationsScope = await TranslationAgent.state(`translations/${id}`)
        translationsScope.ping = true
      }
    })
  })

  function resolvePath(path, itemState) {
    let value = itemState
    while (path.length) {
      const field = path.shift()
      value = value[field]
    }
    return value
  }